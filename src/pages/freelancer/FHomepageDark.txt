import React, { useEffect, useRef, useState } from "react";
import FHeader from "../../components/freelancer/FHeader";
import FSider from "../../components/freelancer/FSider";
import { Link, useLocation, useNavigate } from "react-router-dom";
import { Pie, Bar } from "react-chartjs-2";
import { useMediaQuery } from "react-responsive";
import CountUp from 'react-countup';
import { motion, AnimatePresence } from 'framer-motion';
import '../../assets/css/FHomepage.css';
import {
  Chart as ChartJS,
  ArcElement,
  Tooltip,
  Legend,
  BarElement,
  CategoryScale,
  LinearScale,
  Title,
} from "chart.js";

ChartJS.register(
  ArcElement,
  Tooltip,
  Legend,
  BarElement,
  CategoryScale,
  LinearScale,
  Title
);

const statData = {
  activeProjects: 5,
  completedProjects: 20,
  successRate: 95,
  earnings: 50000,
  inProgressProjects: 30,
};

const successRateData = {
  labels: ["Success Rate"],
  datasets: [
    {
      label: "Success Rate",
      data: [statData.successRate, 100 - statData.successRate],
      backgroundColor: ["#34D399", "#F87171"], // Soft green and red for success/failure
    },
  ],
};

const projectData = {
  labels: ["Active Projects", "Completed Projects", "Monthly Earnings"],
  datasets: [
    {
      label: "Projects & Earnings",
      data: [
        statData.activeProjects,
        statData.completedProjects,
        statData.earnings,
      ],
      backgroundColor: ["#1E3A8A", "#2563EB", "#F59E0B"], // Blue, blue, and yellow for variety
      borderRadius: 10,
      borderSkipped: false,
    },
  ],
};

const FHomepage = ({ userId, role, isAuthenticated, isEditable }) => {
  
  const isMobile = useMediaQuery({ maxWidth: 767 });
  const navigate = useNavigate();
  const location = useLocation();
  const [isLoading, setIsLoading] = useState(true);
  const [chartData, setChartData] = useState(null);
  const [showStatsOverview, setShowStatsOverview] = useState(false);
  const [scrollPosition, setScrollPosition] = useState(0);
  const [darkMode, setDarkMode] = useState(true);

  useEffect(() => {
    const handleScroll = () => {
      const position = window.pageYOffset;
      setScrollPosition(position);
    };

    window.addEventListener('scroll', handleScroll, { passive: true });
    return () => {
      window.removeEventListener('scroll', handleScroll);
    };
  }, []);

  useEffect(() => {
    // Simulate loading data with staggered timing
    const loadData = async () => {
      try {
        await new Promise(resolve => setTimeout(resolve, 1000));
        setIsLoading(false);
        
        await new Promise(resolve => setTimeout(resolve, 500));
        setChartData({
          labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
          datasets: [{
            label: 'Monthly Earnings (â‚¹)',
            data: [30000, 45000, 35000, 50000, 42000, 60000],
            backgroundColor: 'rgba(124, 58, 237, 0.5)',
            borderColor: 'rgba(124, 58, 237, 1)',
            borderWidth: 2,
          }]
        });
        
        await new Promise(resolve => setTimeout(resolve, 300));
        setShowStatsOverview(true);
      } catch (error) {
        console.error('Error loading data:', error);
        setIsLoading(false);
      }
    };

    loadData();
  }, []);

  // Scroll restoration
  useEffect(() => {
    if ('scrollRestoration' in window.history) {
      window.history.scrollRestoration = 'manual';
    }
    window.scrollTo(0, 0);
  }, []);

  const handleMenuClick = (component) => {
    if (location.pathname !== "/freelancer/dashboard") {
      navigate("/freelancer/dashboard", { state: { component } });
    }
  };
  const handleProfileMenu = (profileComponent) => {
    if (location.pathname !== "/freelancer/profile") {
      navigate("/freelancer/profile", { state: { profileComponent } });
    }
  };

  const pathnames = location.pathname.split("/").filter((x) => x);

  const Projects = [
    {
      id: 1,
      name: "Build a React Dashboard",
      description: "A dashboard for analytics.",
      time: "3 days left",
    },
    {
      id: 2,
      name: "Logo Design",
      description: "Create a unique logo for a startup.",
      time: "5 days left",
    },
    {
      id: 3,
      name: "WordPress Blog Setup",
      description: "Setup and customize a WordPress blog.",
      time: "2 days left",
    },
    {
      id: 4,
      name: "SEO Optimization",
      description: "Optimize a website for search engines.",
      time: "7 days left",
    },
    {
      id: 5,
      name: "SEO Optimization",
      description: "Optimize a website for search engines.",
      time: "7 days left",
    },
    {
      id: 6,
      name: "SEO Optimization",
      description: "Optimize a website for search engines.",
      time: "7 days left",
    },
  ];

  const handleNavigate = (component) => {
    navigate("/freelancer/dashboard", { state: { component } });
  };

  const containerRef = useRef(null);
  const [showLeftButton, setShowLeftButton] = useState(false);
  const [showRightButton, setShowRightButton] = useState(true);
  const [projectWidth, setProjectWidth] = useState(0);

  useEffect(() => {
    const handleVisibility = () => {
      if (containerRef.current) {
        const { scrollLeft, scrollWidth, clientWidth } = containerRef.current;
        setShowLeftButton(scrollLeft > 10);
        setShowRightButton(scrollLeft < scrollWidth - clientWidth - 10);
      }
    };

    const container = containerRef.current;
    if (container) {
      container.addEventListener('scroll', handleVisibility);
      // Initial check
      handleVisibility();
      
      // Check after images/content loads
      window.addEventListener('load', handleVisibility);
      
      return () => {
        container.removeEventListener('scroll', handleVisibility);
        window.removeEventListener('load', handleVisibility);
      };
    }
  }, []);

  const calculateProjectWidth = () => {
    if (containerRef.current && containerRef.current.firstChild) {
      const card = containerRef.current.firstChild;
      const style = window.getComputedStyle(card);
      const width = card.offsetWidth + parseInt(style.marginLeft) + parseInt(style.marginRight);
      setProjectWidth(width);
    }
  };

  useEffect(() => {
    calculateProjectWidth();
    window.addEventListener("resize", calculateProjectWidth);
    return () => window.removeEventListener("resize", calculateProjectWidth);
  }, []);

  const scrollLeft = () => {
    if (containerRef.current) {
      containerRef.current.scrollBy({ left: -projectWidth, behavior: "smooth" });
    }
  };

  const scrollRight = () => {
    if (containerRef.current) {
      containerRef.current.scrollBy({ left: projectWidth, behavior: "smooth" });
    }
  };

  // Enhanced animation variants
  const fadeInUp = {
    hidden: { opacity: 0, y: 20 },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: { 
        type: "spring", 
        stiffness: 100, 
        damping: 15 
      }
    }
  };

  const staggerContainer = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.08
      }
    }
  };

  return (
    <div className={`flex h-screen ${darkMode ? 'bg-black text-white' : 'bg-[#f5f5f7]'} transition-colors duration-500`}>
      <FSider 
        userId={userId}
        role={role}
        isAuthenticated={isAuthenticated}
        isEditable={isEditable}
        dropdown={true} 
        collapsed={true} 
        handleProfileMenu={handleProfileMenu}
      />
      <div className={`flex-1 flex flex-col overflow-hidden ${isMobile ? 'ml-0 pb-16' : 'ml-14'}`}>
        <FHeader 
          userId={userId}
          role={role}
          isAuthenticated={isAuthenticated}
          isEditable={isEditable}
        />
        <div className="flex-1 overflow-y-auto p-6 md:p-8">
          <div className="max-w-7xl mx-auto space-y-8">
            {/* Welcome banner - Apple-style */}
            <motion.div
              initial={{ opacity: 0, y: 40 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ 
                type: "spring", 
                stiffness: 50, 
                damping: 20,
                delay: 0.1 
              }}
              className={`relative overflow-hidden rounded-[24px] shadow-lg min-h-[60vh] ${darkMode ? 'bg-[#1c1c1e]' : 'bg-white'}`}
            >
              {/* Subtle background patterns */}
              <div className="absolute inset-0 overflow-hidden">
                {darkMode ? (
                  <div className="absolute inset-0 bg-gradient-to-br from-[#1c1c1e] via-[#2c2c2e] to-[#1c1c1e] opacity-60" />
                ) : (
                  <div className="absolute inset-0 bg-gradient-to-br from-white via-[#f2f2f7] to-white opacity-60" />
                )}
                
                {/* Dot matrix elements (Nothing OS inspired) */}
                <div className="absolute inset-0 grid grid-cols-[repeat(40,1fr)] grid-rows-[repeat(40,1fr)] opacity-5">
                  {[...Array(200)].map((_, i) => (
                    <div key={i} className={`w-1 h-1 rounded-full ${darkMode ? 'bg-white' : 'bg-black'} m-auto opacity-70`}></div>
                  ))}
                </div>
                
                {/* Subtle glow effects */}
                <div className="absolute top-0 left-[20%] w-[40vw] h-[40vw] rounded-full bg-purple-500/10 filter blur-[80px]"></div>
                <div className="absolute bottom-0 right-[20%] w-[30vw] h-[30vw] rounded-full bg-blue-500/10 filter blur-[80px]"></div>
              </div>
            
              {/* Content Container */}
              <div className="relative h-full flex flex-col items-center justify-center p-8 md:p-12">
                <motion.div 
                  variants={staggerContainer}
                  initial="hidden"
                  animate="visible"
                  className="space-y-10 max-w-4xl mx-auto text-center"
                >
                  {/* Welcome Badge */}
                  <motion.div 
                    variants={fadeInUp}
                    className={`inline-flex items-center px-5 py-2.5 rounded-full ${
                      darkMode 
                        ? 'bg-white/10 backdrop-blur-xl border border-white/10' 
                        : 'bg-black/5 backdrop-blur-xl border border-black/5'
                    }`}
                  >
                    <span className={`text-sm font-medium ${darkMode ? 'text-white/90' : 'text-black/80'}`}>
                      Welcome back
                    </span>
                  </motion.div>
            
                  {/* Welcome Message */}
                  <motion.h1 
                    variants={fadeInUp}
                    className="text-5xl sm:text-6xl md:text-7xl font-bold tracking-tight leading-none"
                  >
                    Hello, <span className={`inline-block ${darkMode ? 'text-white' : 'text-black'}`}>
                      Sadguru
                      <span className="inline-block text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-blue-500">
                        .
                      </span>
                    </span>
                  </motion.h1>
            
                  {/* Stats Cards - Apple Style */}
                  <motion.div 
                    variants={fadeInUp}
                    className="grid grid-cols-1 sm:grid-cols-3 gap-4 sm:gap-6 mt-12 px-4"
                  >
                    <motion.div
                      whileHover={{ y: -5, transition: { duration: 0.2 } }}
                      className={`${
                        darkMode 
                          ? 'bg-white/10 backdrop-blur-2xl border border-white/10' 
                          : 'bg-white/80 backdrop-blur-2xl border border-black/5 shadow-sm'
                      } rounded-2xl p-6`}
                    >
                      <div className="flex flex-col items-center">
                        <CountUp
                          start={0}
                          end={statData.completedProjects}
                          duration={2.5}
                          className="text-4xl font-bold mb-2"
                        />
                        <p className={`text-sm font-medium ${darkMode ? 'text-white/70' : 'text-black/60'}`}>
                          Completed Projects
                        </p>
                      </div>
                    </motion.div>
            
                    <motion.div
                      whileHover={{ y: -5, transition: { duration: 0.2 } }}
                      className={`${
                        darkMode 
                          ? 'bg-white/10 backdrop-blur-2xl border border-white/10' 
                          : 'bg-white/80 backdrop-blur-2xl border border-black/5 shadow-sm'
                      } rounded-2xl p-6`}
                    >
                      <div className="flex flex-col items-center">
                        <div className="flex items-baseline">
                          <CountUp
                            start={0}
                            end={4.9}
                            decimals={1}
                            duration={2.5}
                            className="text-4xl font-bold"
                          />
                          <span className="text-2xl font-bold ml-1">/5</span>
                        </div>
                        <p className={`text-sm font-medium mt-2 ${darkMode ? 'text-white/70' : 'text-black/60'}`}>
                          Average Rating
                        </p>
                      </div>
                    </motion.div>
            
                    <motion.div
                      whileHover={{ y: -5, transition: { duration: 0.2 } }}
                      className={`${
                        darkMode 
                          ? 'bg-white/10 backdrop-blur-2xl border border-white/10' 
                          : 'bg-white/80 backdrop-blur-2xl border border-black/5 shadow-sm'
                      } rounded-2xl p-6`}
                    >
                      <div className="flex flex-col items-center">
                        <CountUp
                          start={0}
                          end={92}
                          duration={2.5}
                          suffix="%"
                          className="text-4xl font-bold mb-2"
                        />
                        <p className={`text-sm font-medium ${darkMode ? 'text-white/70' : 'text-black/60'}`}>
                          Client Satisfaction
                        </p>
                      </div>
                    </motion.div>
                  </motion.div>
                </motion.div>
              </div>
            </motion.div>

            {/* Business Metrics Section - Premium style */}
            <motion.section 
              initial={{ opacity: 0, y: 40 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ 
                type: "spring", 
                stiffness: 50, 
                damping: 20,
                delay: 0.2 
              }}
              className={`relative rounded-[24px] overflow-hidden shadow-lg p-8 md:p-10 ${
                darkMode ? 'bg-[#1c1c1e]' : 'bg-white'
              }`}
            >
              <div className="flex items-center justify-center gap-4 mb-12">
                <h2 className={`text-3xl font-semibold ${darkMode ? 'text-white' : 'text-black'}`}>
                  Performance
                </h2>
              </div>
              
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-10">
                {isLoading ? (
                  Array(4).fill(0).map((_, i) => (
                    <div key={i} className="rounded-2xl p-6 animate-pulse h-32">
                      <div className={`h-6 ${darkMode ? 'bg-white/10' : 'bg-black/5'} rounded w-3/4 mb-4`}></div>
                      <div className={`h-12 ${darkMode ? 'bg-white/10' : 'bg-black/5'} rounded w-1/2`}></div>
                    </div>
                  ))
                ) : (
                  <>
                    <motion.div
                      whileHover={{ scale: 1.03, transition: { duration: 0.2 } }}
                      className={`${
                        darkMode 
                          ? 'bg-gradient-to-br from-purple-900/40 to-purple-700/40 backdrop-blur-lg border border-purple-500/20' 
                          : 'bg-gradient-to-br from-purple-50 to-purple-100 border border-purple-200/50'
                      } rounded-2xl p-6 transition-all duration-300`}
                    >
                      <h3 className={`text-base font-medium ${darkMode ? 'text-white/90' : 'text-gray-700'}`}>
                        Total Earnings
                      </h3>
                      <div className="mt-4 text-3xl font-bold">
                        <CountUp
                          prefix="â‚¹"
                          end={statData.earnings}
                          duration={2.5}
                          separator=","
                          className={darkMode ? 'text-white' : 'text-black'}
                        />
                      </div>
                      <div className={`mt-2 text-xs ${darkMode ? 'text-green-400' : 'text-green-600'}`}>
                        +12% from last month
                      </div>
                    </motion.div>

                    <motion.div
                      whileHover={{ scale: 1.03, transition: { duration: 0.2 } }}
                      className={`${
                        darkMode 
                          ? 'bg-gradient-to-br from-blue-900/40 to-blue-700/40 backdrop-blur-lg border border-blue-500/20' 
                          : 'bg-gradient-to-br from-blue-50 to-blue-100 border border-blue-200/50'
                      } rounded-2xl p-6 transition-all duration-300`}
                    >
                      <h3 className={`text-base font-medium ${darkMode ? 'text-white/90' : 'text-gray-700'}`}>
                        Active Projects
                      </h3>
                      <div className="mt-4 text-3xl font-bold">
                        <CountUp
                          end={statData.activeProjects}
                          duration={2.5}
                          className={darkMode ? 'text-white' : 'text-black'}
                        />
                      </div>
                      <div className={`mt-2 text-xs ${darkMode ? 'text-green-400' : 'text-green-600'}`}>
                        +5% from last month
                      </div>
                    </motion.div>

                    <motion.div
                      whileHover={{ scale: 1.03, transition: { duration: 0.2 } }}
                      className={`${
                        darkMode 
                          ? 'bg-gradient-to-br from-amber-900/40 to-amber-700/40 backdrop-blur-lg border border-amber-500/20' 
                          : 'bg-gradient-to-br from-amber-50 to-amber-100 border border-amber-200/50'
                      } rounded-2xl p-6 transition-all duration-300`}
                    >
                      <h3 className={`text-base font-medium ${darkMode ? 'text-white/90' : 'text-gray-700'}`}>
                        In Progress
                      </h3>
                      <div className="mt-4 text-3xl font-bold">
                        <CountUp
                          end={statData.inProgressProjects}
                          duration={2.5}
                          className={darkMode ? 'text-white' : 'text-black'}
                        />
                      </div>
                      <div className={`mt-2 text-xs ${darkMode ? 'text-green-400' : 'text-green-600'}`}>
                        +10% from last month
                      </div>
                    </motion.div>

                    <motion.div
                      whileHover={{ scale: 1.03, transition: { duration: 0.2 } }}
                      className={`${
                        darkMode 
                          ? 'bg-gradient-to-br from-teal-900/40 to-teal-700/40 backdrop-blur-lg border border-teal-500/20' 
                          : 'bg-gradient-to-br from-teal-50 to-teal-100 border border-teal-200/50'
                      } rounded-2xl p-6 transition-all duration-300`}
                    >
                      <h3 className={`text-base font-medium ${darkMode ? 'text-white/90' : 'text-gray-700'}`}>
                        Success Rate
                      </h3>
                      <div className="mt-4 text-3xl font-bold">
                        <CountUp
                          suffix="%"
                          end={statData.successRate}
                          duration={2.5}
                          className={darkMode ? 'text-white' : 'text-black'}
                        />
                      </div>
                      <div className={`mt-2 text-xs ${darkMode ? 'text-green-400' : 'text-green-600'}`}>
                        +5% from last month
                      </div>
                    </motion.div>
                  </>
                )}
              </div>

              {/* Chart Section - Apple style */}
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <motion.div
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: 0.4 }}
                  className={`${
                    darkMode
                      ? 'bg-[#2c2c2e] backdrop-blur-lg'
                      : 'bg-white shadow-sm border border-black/5'
                  } rounded-2xl p-6`}
                >
                  <h3 className={`text-lg font-medium mb-6 ${darkMode ? 'text-white/90' : 'text-gray-800'}`}>
                    Revenue Trend
                  </h3>
                  {chartData && (
                    <div className="relative w-full" style={{ height: '300px' }}>
                      <Bar
                        data={{
                          ...chartData,
                          datasets: [{
                            ...chartData.datasets[0],
                            backgroundColor: darkMode ? 'rgba(162, 155, 254, 0.7)' : 'rgba(124, 58, 237, 0.7)',
                            borderColor: darkMode ? 'rgba(162, 155, 254, 1)' : 'rgba(124, 58, 237, 1)',
                          }]
                        }}
                        options={{
                          responsive: true,
                          maintainAspectRatio: false,
                          plugins: {
                            legend: {
                              display: false
                            },
                            tooltip: {
                              backgroundColor: darkMode ? 'rgba(44, 44, 46, 0.9)' : 'rgba(255, 255, 255, 0.9)',
                              titleColor: darkMode ? '#ffffff' : '#000000',
                              bodyColor: darkMode ? '#ffffff' : '#000000',
                              borderColor: darkMode ? 'rgba(255, 255, 255, 0.2)' : 'rgba(0, 0, 0, 0.1)',
                              borderWidth: 1,
                              titleFont: {
                                size: 14,
                                weight: '600'
                              },
                              bodyFont: {
                                size: 13
                              },
                              padding: 12,
                              cornerRadius: 8,
                            }
                          },
                          scales: {
                            y: {
                              beginAtZero: true,
                              grid: {
                                color: darkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.05)'
                              },
                              ticks: {
                                color: darkMode ? 'rgba(255, 255, 255, 0.7)' : 'rgba(0, 0, 0, 0.7)'
                              }
                            },
                            x: {
                              grid: {
                                display: false
                              },
                              ticks: {
                                color: darkMode ? 'rgba(255, 255, 255, 0.7)' : 'rgba(0, 0, 0, 0.7)'
                              }
                            }
                          }
                        }}
                        height={300}
                      />
                    </div>
                  )}
                </motion.div>

                <motion.div
                  initial={{ opacity: 0, x: 20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: 0.4 }}
                  className={`${
                    darkMode
                      ? 'bg-[#2c2c2e] backdrop-blur-lg'
                      : 'bg-white shadow-sm border border-black/5'
                  } rounded-2xl p-6`}
                >
                  <h3 className={`text-lg font-medium mb-6 ${darkMode ? 'text-white/90' : 'text-gray-800'}`}>
                    Success Analysis
                  </h3>
                  <div className="relative w-full" style={{ height: '300px' }}>
                    <Pie
                      data={{
                        ...successRateData,
                        datasets: [{
                          ...successRateData.datasets[0],
                          backgroundColor: darkMode 
                            ? ["rgba(162, 155, 254, 0.8)", "rgba(248, 113, 113, 0.4)"] 
                            : ["rgba(124, 58, 237, 0.7)", "rgba(248, 113, 113, 0.5)"]
                        }]
                      }}
                      options={{
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                          legend: {
                            position: "bottom",
                            labels: {
                              color: darkMode ? 'rgba(255, 255, 255, 0.8)' : 'rgba(0, 0, 0, 0.8)',
                              padding: 20,
                              font: {
                                size: 12,
                                weight: '500'
                              },
                              usePointStyle: true,
                              pointStyle: 'circle'
                            }
                          },
                          tooltip: {
                            backgroundColor: darkMode ? 'rgba(44, 44, 46, 0.9)' : 'rgba(255, 255, 255, 0.9)',
                            titleColor: darkMode ? '#ffffff' : '#000000',
                            bodyColor: darkMode ? '#ffffff' : '#000000',
                            borderColor: darkMode ? 'rgba(255, 255, 255, 0.2)' : 'rgba(0, 0, 0, 0.1)',
                            borderWidth: 1,
                            titleFont: {
                              size: 14,
                              weight: '600'
                            },
                            bodyFont: {
                              size: 13
                            },
                            padding: 12,
                            cornerRadius: 8,
                          }
                        }
                      }}
                      height={300}
                    />
                  </div>
                </motion.div>
              </div>
            </motion.section>

            {/* Recent Activity - Apple Style */}
            <motion.section 
              initial={{ opacity: 0, y: 40 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ 
                type: "spring", 
                stiffness: 50, 
                damping: 20,
                delay: 0.3 
              }}
              className={`relative rounded-[24px] overflow-hidden shadow-lg ${
                darkMode ? 'bg-[#1c1c1e]' : 'bg-white'
              }`}
            >
              <div className="p-8 md:p-10">
                <h2 className={`text-3xl font-semibold mb-8 text-center ${darkMode ? 'text-white' : 'text-black'}`}>
                  Recent Activity
                </h2>

                <motion.ul 
                  variants={staggerContainer}
                  initial="hidden"
                  animate="visible"
                  className={`rounded-2xl divide-y ${
                    darkMode 
                      ? 'divide-white/10 bg-[#2c2c2e]' 
                      : 'divide-black/5 bg-[#f5f5f7]'
                  }`}
                >
                  {/* Activity Items */}
                  {[
                    {
                      icon: "M15 15l-2 5L9 9l11 4-5 2zm0 0l5 5M7.188 2.239l.777 2.897M5.136 7.965l-2.898-.777M13.95 4.05l-2.122 2.122m-5.657 5.656l-2.12 2.122",
                      title: "Submitted a proposal",
                      subtitle: "E-commerce Website",
                      time: "2 hours ago",
                      color: "purple"
                    },
                    {
                      icon: "M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z",
                      title: "Accepted a project",
                      subtitle: "Logo Design",
                      time: "1 day ago",
                      color: "green"
                    },
                    {
                      icon: "M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z",
                      title: "Profile updated",
                      subtitle: "Personal information changed",
                      time: "3 days ago",
                      color: "blue"
                    }
                  ].map((activity, index) => (
                    <motion.li 
                      key={index}
                      variants={fadeInUp}
                      className="group"
                    >
                      <div className={`p-4 flex items-center gap-4 group-hover:bg-white/5 transition-colors duration-300 ${
                        index === 0 ? 'rounded-t-2xl' : index === 2 ? 'rounded-b-2xl' : ''
                      }`}>
                        <span className={`flex-shrink-0 w-10 h-10 rounded-full flex items-center justify-center ${
                          activity.color === 'purple' 
                            ? darkMode ? 'bg-purple-900/60 text-purple-300' : 'bg-purple-100 text-purple-600'
                            : activity.color === 'green'
                              ? darkMode ? 'bg-green-900/60 text-green-300' : 'bg-green-100 text-green-600'
                              : darkMode ? 'bg-blue-900/60 text-blue-300' : 'bg-blue-100 text-blue-600'
                        }`}>
                          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d={activity.icon}/>
                          </svg>
                        </span>
                        <div className="flex-1 min-w-0">
                          <div className="flex items-center justify-between">
                            <span className={`font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                              {activity.title}
                            </span>
                            <span className={`text-xs ${darkMode ? 'text-white/50' : 'text-gray-500'}`}>
                              {activity.time}
                            </span>
                          </div>
                          <span className={`text-sm ${
                            activity.color === 'purple' 
                              ? darkMode ? 'text-purple-300' : 'text-purple-600' 
                              : activity.color === 'green'
                                ? darkMode ? 'text-green-300' : 'text-green-600'
                                : darkMode ? 'text-blue-300' : 'text-blue-600'
                          }`}>
                            {activity.subtitle}
                          </span>
                        </div>
                      </div>
                    </motion.li>
                  ))}
                </motion.ul>

                {/* View All Button */}
                <div className="mt-8 text-center">
                  <motion.button 
                    whileHover={{ scale: 1.03 }}
                    whileTap={{ scale: 0.98 }}
                    className={`inline-flex items-center gap-2 px-6 py-3 rounded-full ${
                      darkMode 
                        ? 'bg-white/10 text-white hover:bg-white/15' 
                        : 'bg-black/5 text-black hover:bg-black/10'
                    } transition-colors duration-300 font-medium`}
                  >
                    View All
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7"/>
                    </svg>
                  </motion.button>
                </div>
              </div>
            </motion.section>

            {/* Project Timeline - Apple Style */}
            <motion.section 
              initial={{ opacity: 0, y: 40 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ 
                type: "spring", 
                stiffness: 50, 
                damping: 20,
                delay: 0.4
              }}
              className={`relative rounded-[24px] overflow-hidden shadow-lg p-8 md:p-10 ${
                darkMode ? 'bg-[#1c1c1e]' : 'bg-white'
              }`}
            >
              <h2 className={`text-3xl font-semibold mb-8 text-center ${darkMode ? 'text-white' : 'text-black'}`}>
                Project Timeline
              </h2>

              <div className="relative">
                {/* Scroll Buttons */}
                {showLeftButton && (
                  <motion.button 
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.95 }}
                    onClick={scrollLeft}
                    className="absolute left-0 top-1/2 -translate-y-1/2 -ml-4 z-10 w-10 h-10 bg-white/20 backdrop-blur-lg rounded-full flex items-center justify-center shadow-lg text-white"
                  >
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M15 19l-7-7 7-7" />
                    </svg>
                  </motion.button>
                )}
                
                {showRightButton && (
                  <motion.button 
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.95 }}
                    onClick={scrollRight}
                    className="absolute right-0 top-1/2 -translate-y-1/2 -mr-4 z-10 w-10 h-10 bg-white/20 backdrop-blur-lg rounded-full flex items-center justify-center shadow-lg text-white"
                  >
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M9 5l7 7-7 7" />
                    </svg>
                  </motion.button>
                )}

                {/* Projects Cards */}
                <div 
                  ref={containerRef}
                  className="flex space-x-6 overflow-x-auto pb-4 scrollbar-hide snap-x snap-mandatory"
                  style={{ scrollbarWidth: 'none', msOverflowStyle: 'none' }}
                >
                  {Projects.map((project) => (
                    <motion.div 
                      key={project.id}
                      whileHover={{ y: -5 }}
                      className={`flex-shrink-0 w-80 snap-start overflow-hidden ${
                        darkMode 
                          ? 'bg-[#2c2c2e] border border-white/10' 
                          : 'bg-white border border-black/5 shadow-sm'
                      } rounded-2xl transition-all duration-300`}
                    >
                      <div className={`h-1 ${
                        project.time.includes('1 day') || project.time.includes('hours') 
                          ? 'bg-red-500' 
                          : project.time.includes('2 days') || project.time.includes('3 days') 
                            ? 'bg-amber-500' 
                            : 'bg-emerald-500'
                      }`}></div>
                      <div className="p-6">
                        <h3 className={`text-xl font-semibold mb-2 ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                          {project.name}
                        </h3>
                        <p className={`text-base mb-4 ${darkMode ? 'text-white/70' : 'text-gray-600'}`}>
                          {project.description}
                        </p>
                        <div className="flex items-center justify-between">
                          <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                            project.time.includes('1 day') || project.time.includes('hours') 
                              ? darkMode ? 'bg-red-900/30 text-red-300' : 'bg-red-100 text-red-600' 
                              : project.time.includes('2 days') || project.time.includes('3 days')
                                ? darkMode ? 'bg-amber-900/30 text-amber-300' : 'bg-amber-100 text-amber-600'
                                : darkMode ? 'bg-emerald-900/30 text-emerald-300' : 'bg-emerald-100 text-emerald-600'
                          }`}>
                            {project.time}
                          </span>
                          <motion.button 
                            whileHover={{ scale: 1.05 }}
                            whileTap={{ scale: 0.95 }}
                            className={`text-sm font-medium ${
                              darkMode ? 'text-purple-300 hover:text-purple-200' : 'text-purple-600 hover:text-purple-800'
                            } transition-colors`}
                          >
                            Details
                          </motion.button>
                        </div>
                      </div>
                    </motion.div>
                  ))}
                </div>
              </div>
            </motion.section>

            {/* Communication Center - Apple Style */}
            <motion.section 
              initial={{ opacity: 0, y: 40 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ 
                type: "spring", 
                stiffness: 50, 
                damping: 20,
                delay: 0.5
              }}
              className={`relative rounded-[24px] overflow-hidden shadow-lg p-8 md:p-10 ${
                darkMode ? 'bg-[#1c1c1e]' : 'bg-white'
              }`}
            >
              <h2 className={`text-3xl font-semibold mb-6 text-center ${darkMode ? 'text-white' : 'text-black'}`}>
                Communication
              </h2>

              {/* Message tabs - Apple style */}
              <div className="mb-8 flex justify-center">
                <div className={`inline-flex rounded-full p-1 ${
                  darkMode ? 'bg-[#2c2c2e]' : 'bg-black/5'
                }`}>
                  <button 
                    className={`px-6 py-2 rounded-full text-sm font-medium transition-colors ${
                      darkMode 
                        ? 'bg-[#3a3a3c] text-white' 
                        : 'bg-white text-black shadow-sm'
                    }`}
                  >
                    Messages
                  </button>
                  <button
                    className={`px-6 py-2 rounded-full text-sm font-medium transition-colors ${
                      darkMode ? 'text-white/60' : 'text-black/60'
                    }`}
                  >
                    Notifications
                  </button>
                </div>
              </div>

              {/* Messages list - Apple style */}
              <motion.div 
                variants={staggerContainer}
                initial="hidden"
                animate="visible"
                className="space-y-3"
              >
                {[
                  { id: 1, name: 'John Smith', message: 'I loved your work on the website design!', time: '10:30 AM', unread: true },
                  { id: 2, name: 'Sarah Williams', message: 'Can we discuss the project timeline?', time: 'Yesterday', unread: true },
                  { id: 3, name: 'Alex Johnson', message: 'The logo looks fantastic, thank you!', time: 'Yesterday', unread: true },
                  { id: 4, name: 'Robert Chen', message: 'Do you have availability next month?', time: '3 days ago', unread: false }
                ].map(msg => (
                  <motion.div 
                    key={msg.id} 
                    variants={fadeInUp}
                    whileHover={{ x: 4 }}
                    className={`flex items-start gap-4 p-4 rounded-lg ${msg.unread ? 'bg-violet-50 ring-1 ring-violet-100' : 'bg-gray-50'}`}>
                    <div className="w-10 h-10 rounded-full bg-gradient-to-br from-blue-400 to-violet-500 flex items-center justify-center text-white font-medium">
                      {msg.name.split(' ').map(n => n[0]).join('')}
                    </div>
                    <div className="flex-1 min-w-0">
                      <div className="flex items-center justify-between">
                        <h4 className="font-medium text-gray-900">{msg.name}</h4>
                        <span className="text-xs text-gray-500">{msg.time}</span>
                      </div>
                      <p className="text-sm text-gray-600">{msg.message}</p>
                    </div>
                    {msg.unread && <span className="w-2 h-2 rounded-full bg-violet-500"></span>}
                  </motion.div>
                ))}
              </motion.div>
              
              <div className="mt-6 text-center">
                <button className="inline-flex items-center gap-2 px-6 py-3 bg-white rounded-xl 
                  border border-violet-200 text-violet-600 hover:bg-violet-50 
                  transition-all duration-300 group font-medium">
                  View All Messages
                  <svg className="w-4 h-4 transform group-hover:translate-x-1 transition-transform" 
                    fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 7l5 5m0 0l-5 5m5-5H6"/>
                  </svg>
                </button>
              </div>
            </motion.section>
          </div>
        </div>
      </div>
    </div>
  );
};

export default FHomepage;
